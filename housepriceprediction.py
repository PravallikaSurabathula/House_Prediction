# -*- coding: utf-8 -*-
"""HousePricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15GsRlIB3VXdFyF2IvCgs-FdBwOcAsCkq

# House Price Prediction (California Housing Dataset)

This project demonstrates a beginner-friendly machine learning pipeline to **predict house prices** using the **California Housing dataset**. It includes data preprocessing, training a linear regression model, evaluating performance, and visualizing the results.

---

## Features

- Linear Regression using `scikit-learn`
- Model evaluation with **Mean Squared Error (MSE)** and **R² Score**
- Data visualizations:
  - Feature distributions
  - Correlation heatmap
  - Actual vs Predicted price scatter plot

---

## Dataset

We use the [California Housing dataset](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_california_housing.html) which is built into `scikit-learn`.

Features include:
- Median Income
- House Age
- Average Rooms, Bedrooms
- Population
- Latitude & Longitude
- Median House Value (target)

---

## Installation

Make sure you have Python installed. Then install the required libraries:

```bash
pip install scikit-learn pandas matplotlib seaborn
```
## Visualizations

1. **Feature Distributions**  
   Helps understand the shape and spread of each input variable.

2. **Correlation Heatmap**  
   Displays correlations between all features and the target price.

3. **Actual vs Predicted Prices**  
   A scatter plot comparing true values with model predictions.

---

## Evaluation Metrics

- **Mean Squared Error (MSE):**  
  Measures average squared difference between actual and predicted values.

- **R² Score:**  
  Indicates how well the model explains the variability in the target. Ranges from 0 to 1.

---

## Future Improvements

- Try different models like **Random Forest**, **XGBoost**  
- Add **feature scaling** or **polynomial features**  
- Use **GridSearchCV** for hyperparameter tuning  
- Build a **web app using Flask or Streamlit**

---

## License

This project is open-source and free to use under the **MIT License**.

---

## Acknowledgements

- [Scikit-learn](https://scikit-learn.org/)  
- [Seaborn](https://seaborn.pydata.org/)  
- [California Housing Dataset](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_california_housing.html)
"""

# House Price Prediction (Using California Housing Dataset)
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd

# Load dataset
data = fetch_california_housing()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target, name="Price")

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R^2 Score: {r2:.2f}")

import matplotlib.pyplot as plt
import seaborn as sns

# Optional: Make plots look nicer
sns.set(style="whitegrid", palette="muted", font_scale=1.1)

# 1. Feature Distribution Plot
X.hist(bins=30, figsize=(15, 10), edgecolor='black')
plt.suptitle("Feature Distributions", fontsize=16)
plt.tight_layout()
plt.show()

# 2. Correlation Heatmap
plt.figure(figsize=(10, 8))
corr_matrix = pd.concat([X, y], axis=1).corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", square=True)
plt.title("Feature Correlation Heatmap")
plt.show()

# 3. Actual vs Predicted Plot
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5, color="blue", edgecolors='k')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # perfect prediction line
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.grid(True)
plt.tight_layout()
plt.show()